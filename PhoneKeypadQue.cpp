#include<iostream>
#include<vector>
using namespace std;

void solve(string digit,string output,int index,vector<string>& ans,string mapping[]){
    //base case
    if(index>=digit.length())
    {
        ans.push_back(output);
        return;
    }

    int number = digit[index]-'0';
    string value = mapping[number];

    for(int i=0;i<value.length();i++)
    {
        output.push_back(value[i]);
        solve(digit,output,index+1,ans,mapping);
        output.pop_back();
    }
}

vector<string> letterCombination(string digit){
    vector<string> ans;

    if(digit.length()==0)
        return ans;

    string output ="";
    int index = 0;

    string mapping[10]={"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};

    solve(digit,output,index,ans,mapping);

    return ans;

}

// permutations of string

void solve(vector<int> num,vector<vector<int>>& ans,int index){
    //base case
    if(index >= num.size()){
        ans.push_back(num);
        return ;
    }

    for(int j=index;j<num.size();j++){
        swap(num[index],num[j]);
        solve(num,ans,index+1);
        //backtrack
        swap(num[index],num[j]);
    }
}
vector<vector<int>> permute(vector<int>& num){
    vector<vector<int>> ans;
    int index=0;
    solve(num,ans,index);
    return ans ;
}

int main(){
    /*
    string str1;
    cout<<"Enter string:";
    cin>>str1;

    vector<string> result = letterCombination(str1);

    cout << "Letter combinations:";
    for (int i = 0; i < result.size(); i++) {
        cout << " " << result[i];
    }
    cout << endl;
    */

    int size;
    cout<<"Enter the size of vector:"<<endl;
    cin>>size;
    vector<int> num;
    cout<<"Enter elements:";
    for (int i = 0; i < size; i++) {
        int n;
        cin >> n;
        num.push_back(n);
    }

    vector<vector<int>> result=permute(num);

     cout << "Permutations:" << endl;
    for (int i = 0; i < result.size(); ++i) {
        for (int j = 0; j < num.size(); ++j) {
            cout << result[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}

// Why we are using vector of vector to store ans??
/*
[
    [1, 2, 3],   // First permutation
    [1, 3, 2],   // Second permutation
    [2, 1, 3],   // Third permutation
    [2, 3, 1],   // Fourth permutation
    [3, 2, 1],   // Fifth permutation
    [3, 1, 2]    // Sixth permutation
]

In this representation:

The outer vector holds all the permutations.
Each inner vector represents one permutation.

The reason we are using a vector of vectors (vector<vector<int>>) is because each permutation generated by the permute function is represented as a vector of integers. Since we want to store multiple permutations, we use a vector to hold them. Each element of the outer vector represents one permutation, and it is itself a vector containing the integers in that permutation.

*/